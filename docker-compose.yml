version: '3.8'

services:
  qdrant:
    image: qdrant/qdrant:v1.14.1
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./qdrant_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    restart: unless-stopped
    networks:
      - qodo_network

  agent-reviewer:
    build:
      context: ./agent-reviewer # Assuming Dockerfile for webhook-server is in the same directory as this docker-compose.yml
      dockerfile: Dockerfile # This refers to the Dockerfile in the Canvas
    container_name: agent_reviewer
    ports:
      - "4100:3000"
    environment:
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL}
      - GITLAB_API_TOKEN=${GITLAB_API_TOKEN}
      - GITLAB_API_URL=${GITLAB_API_URL}
      - GITLAB_USERNAME=${GITLAB_USERNAME}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - API_KEY=${API_KEY}
      - APP_URL=${APP_URL}
      - QODO_EMBED_API_KEY=${QODO_EMBED_API_KEY}
      # Ensure this URL points to the service name and port of qodo-embed-api
      - QODO_EMBED_API_URL=${QODO_EMBED_API_URL}
      - LLM_PROVIDER=${LLM_PROVIDER}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_API_URL=${OPENROUTER_API_URL}
      - OPENROUTER_API_MODEL=${OPENROUTER_API_MODEL}
      - OLLAMA_API_URL=${OLLAMA_API_URL}
      - OLLAMA_MODEL=${OLLAMA_MODEL}
      - ENABLE_MR_REVIEW=${ENABLE_MR_REVIEW}
      - ENABLE_PROJECT_CONTEXT=${ENABLE_PROJECT_CONTEXT}
      - WAIT_FOR_EMBEDDINGS=${WAIT_FOR_EMBEDDINGS}
      - EMBEDDING_WAIT_TIMEOUT=${EMBEDDING_WAIT_TIMEOUT}
      - AUTO_EMBED_PROJECTS=${AUTO_EMBED_PROJECTS}
      - TEMP_DIR=/app/temp
      - QUEUE_CONCURRENCY=${QUEUE_CONCURRENCY}
      - QUEUE_MAX_ATTEMPTS=${QUEUE_MAX_ATTEMPTS}
      - QUEUE_RETRY_DELAY=${QUEUE_RETRY_DELAY}
      - SEQUENTIAL_THINKING_THOUGHTS_COUNT=${SEQUENTIAL_THINKING_THOUGHTS_COUNT}
      - ENABLE_NOTION_INTEGRATION=${ENABLE_NOTION_INTEGRATION}
      - NOTION_API_TOKEN=${NOTION_API_TOKEN}
      - NOTION_API_TIMEOUT=${NOTION_API_TIMEOUT}
      - ENHANCED_CONTEXT_ENABLED=${ENHANCED_CONTEXT_ENABLED}
      - ENHANCED_CONTEXT_MAX_LINES=${ENHANCED_CONTEXT_MAX_LINES}
      - ENHANCED_CONTEXT_MAX_FILES=${ENHANCED_CONTEXT_MAX_FILES}
      - ENHANCED_CONTEXT_MAX_QUERIES=${ENHANCED_CONTEXT_MAX_QUERIES}
      - ENHANCED_CONTEXT_TIMEOUT_MS=${ENHANCED_CONTEXT_TIMEOUT_MS}
      - ENHANCED_CONTEXT_MAX_RESULTS_PER_QUERY=${ENHANCED_CONTEXT_MAX_RESULTS_PER_QUERY}
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - QDRANT_CODE_COLLECTION=${QDRANT_CODE_COLLECTION}
      - QDRANT_DOCS_COLLECTION=${QDRANT_DOCS_COLLECTION}
      - USE_QDRANT=${USE_QDRANT}
      - QDRANT_FALLBACK_TO_DB=${QDRANT_FALLBACK_TO_DB}
    volumes:
      - ./temp:/app/temp # Mounts a local ./temp directory to /app/temp in the container
    restart: unless-stopped
    networks:
      - qodo_network # Assigns this service to the qodo_network
      - llm-network # Assigns this service to the llm_network
      - proxy

  qodo-embed-api:
    # Assuming the Dockerfile for qodo-embed-api is in a subdirectory, e.g., ./qodo-embed-api-src
    # If it's in the same directory and named differently, adjust accordingly.
    # If it's also named Dockerfile but for a different service, it needs its own context.
    # For this example, let's assume its Dockerfile is in a directory named 'qodo_embed_api_service'
    build:
      context: ./qodo-embedding-service # Adjust this path to the directory containing the Dockerfile for qodo-embed-api
      dockerfile: Dockerfile # Or specify if it's named differently
    container_name: qodo_embed_api
    ports:
      - "4000:8000"
    restart: unless-stopped
    environment:
      - HF_HOME=/cache/huggingface
      - MODEL_NAME=Qodo/Qodo-Embed-1-1.5B
      - DEVICE=cuda
    volumes:
      - huggingface_cache_vol:/cache/huggingface
    networks:
      - qodo_network # Assigns this service to the qodo_network
      - llm-network # Assigns this service to the llm_network
      - proxy
    # --- Healthcheck (optional) ---
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # --- GPU Support (optional) ---
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

# Optional Ollama service (uncomment to use)
  # ollama:
  #   image: ollama/ollama:latest
  #   container_name: ollama
  #   ports:
  #     - "11434:11434"
  #   volumes:
  #     - ollama_data:/root/.ollama
  #   restart: unless-stopped
  #   networks:
  #     - qodo_network
  #   # Uncomment to use GPU
  #   # deploy:
  #   #   resources:
  #   #     reservations:
  #   #       devices:
  #   #         - driver: nvidia
  #   #           count: 1
  #   #           capabilities: [gpu]

# Define the network that both services will share
networks:
  proxy:
    external: true
  qodo_network:
    external: true
  llm-network:
    name: llm-network # Explicitly names the network
    driver: bridge    # Default driver
  # qodo_network:
  #   name: qodo_network # Explicitly names the network
  #   driver: bridge    # Default driver

# Define the named volumes
volumes:
  huggingface_cache_vol:
    driver: local
  # ollama_data:
  #   driver: local
