import { defineStore } from 'pinia'
import { ref } from 'vue'
import type { MonthlyReport, MonthlyReportListParams, CreateMonthlyReportRequest } from '@/types'
import { monthlyReportApi } from '@/services/api'

export const useMonthlyReportStore = defineStore('monthlyReports', () => {
  const reports = ref<MonthlyReport[]>([])
  const currentReport = ref<MonthlyReport | null>(null)
  const isLoading = ref(false)
  const error = ref<string | null>(null)
  
  // Pagination state
  const pagination = ref({
    page: 1,
    limit: 20,
    total: 0,
    totalPages: 0
  })

  /**
   * Fetch list of monthly reports
   */
  const fetchReports = async (params?: MonthlyReportListParams) => {
    isLoading.value = true
    error.value = null

    try {
      const response = await monthlyReportApi.listMonthlyReports(params || {})
      
      if (response.success && response.data) {
        reports.value = response.data
        if (response.pagination) {
          pagination.value = response.pagination
        }
      } else {
        error.value = response.message || 'Failed to fetch monthly reports'
      }
    } catch (err) {
      error.value = err instanceof Error ? err.message : 'Failed to fetch monthly reports'
    } finally {
      isLoading.value = false
    }
  }

  /**
   * Fetch a specific monthly report
   */
  const fetchReport = async (month: number, year: number) => {
    isLoading.value = true
    error.value = null

    try {
      const response = await monthlyReportApi.getMonthlyReport(month, year)
      
      if (response.success && response.data) {
        currentReport.value = response.data
      } else {
        error.value = response.message || 'Failed to fetch monthly report'
        currentReport.value = null
      }
    } catch (err) {
      error.value = err instanceof Error ? err.message : 'Failed to fetch monthly report'
      currentReport.value = null
    } finally {
      isLoading.value = false
    }
  }

  /**
   * Create a new monthly report
   */
  const createReport = async (request: CreateMonthlyReportRequest) => {
    isLoading.value = true
    error.value = null

    try {
      console.log('Store: Creating monthly report with request:', request)
      const response = await monthlyReportApi.createMonthlyReport(request)
      console.log('Store: API response:', response)

      if (response.success && response.data) {
        currentReport.value = response.data
        // Refresh the list
        await fetchReports()
        return response.data
      } else {
        error.value = response.message || 'Failed to create monthly report'
        console.error('Store: Failed to create report:', error.value)
        return null
      }
    } catch (err) {
      error.value = err instanceof Error ? err.message : 'Failed to create monthly report'
      console.error('Store: Exception creating report:', err)
      return null
    } finally {
      isLoading.value = false
    }
  }

  /**
   * Update a monthly report
   */
  const updateReport = async (id: number, reportData: any) => {
    isLoading.value = true
    error.value = null

    try {
      const response = await monthlyReportApi.updateMonthlyReport(id, { reportData })
      
      if (response.success && response.data) {
        currentReport.value = response.data
        // Update in the list if present
        const index = reports.value.findIndex(r => r.id === id)
        if (index !== -1) {
          reports.value[index] = response.data
        }
        return response.data
      } else {
        error.value = response.message || 'Failed to update monthly report'
        return null
      }
    } catch (err) {
      error.value = err instanceof Error ? err.message : 'Failed to update monthly report'
      return null
    } finally {
      isLoading.value = false
    }
  }

  /**
   * Delete a monthly report
   */
  const deleteReport = async (id: number) => {
    isLoading.value = true
    error.value = null

    try {
      const response = await monthlyReportApi.deleteMonthlyReport(id)
      
      if (response.success) {
        // Remove from list
        reports.value = reports.value.filter(r => r.id !== id)
        if (currentReport.value?.id === id) {
          currentReport.value = null
        }
        return true
      } else {
        error.value = response.message || 'Failed to delete monthly report'
        return false
      }
    } catch (err) {
      error.value = err instanceof Error ? err.message : 'Failed to delete monthly report'
      return false
    } finally {
      isLoading.value = false
    }
  }

  /**
   * Get auto-generated data preview
   */
  const getAutoGeneratedData = async (month: number, year: number) => {
    isLoading.value = true
    error.value = null

    try {
      const response = await monthlyReportApi.getAutoGeneratedData(month, year)
      
      if (response.success && response.data) {
        return response.data
      } else {
        error.value = response.message || 'Failed to get auto-generated data'
        return null
      }
    } catch (err) {
      error.value = err instanceof Error ? err.message : 'Failed to get auto-generated data'
      return null
    } finally {
      isLoading.value = false
    }
  }

  /**
   * Clear current report
   */
  const clearCurrentReport = () => {
    currentReport.value = null
  }

  /**
   * Clear error
   */
  const clearError = () => {
    error.value = null
  }

  return {
    reports,
    currentReport,
    isLoading,
    error,
    pagination,
    fetchReports,
    fetchReport,
    createReport,
    updateReport,
    deleteReport,
    getAutoGeneratedData,
    clearCurrentReport,
    clearError
  }
})

