// Monthly Report model for storing and managing monthly reports

export interface ActionPoint {
  date: string;
  action: string;
  pic: string;
  status: 'finish' | 'ongoing' | 'drop';
}

export interface Highlight {
  description: string;
  completed: boolean;
}

export interface Lowlight {
  description: string;
  completed: boolean;
}

export interface TopContributor {
  username: string;
  mrCount: number;
}

export interface MergeRequestDashboard {
  totalMRCreated: number;
  totalMRMerged: number;
  mergeRate: number;
  topContributors: TopContributor[];
}

export interface ToolingChange {
  description: string;
}

export interface LessonLearned {
  whatHappened: string;
  whyItMatters: string;
  nextAction: string;
}

export interface QualityMetric {
  metric: string;
  previousValue: number;
  currentValue: number;
  trend: 'up' | 'down' | 'stable';
  unit: string;
}

export interface BudgetItem {
  item: string;
  budgeted: number;
  actual: number;
  variance: number;
}

export interface MonthlyReportData {
  month: number; // 1-12
  year: number;
  actionPoints: ActionPoint[];
  highlights: Highlight[];
  lowlights: Lowlight[];
  techUpdate: {
    mergeRequestDashboard: MergeRequestDashboard;
    toolingChanges: ToolingChange[];
  };
  lessonsLearned: LessonLearned[];
  productStrategy: {
    feedbackSummary: string;
    feedbackLink?: string;
    qualityMetrics: QualityMetric[];
  };
  budgeting: {
    items: BudgetItem[];
  };
  thankYouNote: string;
}

export interface MonthlyReport {
  id?: number;
  month: number;
  year: number;
  reportData: MonthlyReportData;
  createdAt?: Date;
  updatedAt?: Date;
  createdBy?: string;
}

// Database record type
export interface MonthlyReportRecord {
  id: number;
  month: number;
  year: number;
  report_data: string; // JSONB stored as string
  created_at: Date;
  updated_at: Date;
  created_by: string;
}

// API request/response types
export interface CreateMonthlyReportRequest {
  month: number;
  year: number;
  autoGenerate?: boolean; // If true, auto-populate from existing data
}

export interface UpdateMonthlyReportRequest {
  reportData: Partial<MonthlyReportData>;
}

export interface MonthlyReportListParams {
  year?: number;
  month?: number;
  page?: number;
  limit?: number;
}

export interface MonthlyReportResponse {
  success: boolean;
  data?: MonthlyReport;
  message?: string;
}

export interface MonthlyReportListResponse {
  success: boolean;
  data?: MonthlyReport[];
  pagination?: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
  message?: string;
}

// Auto-generation data types
export interface AutoGeneratedData {
  actionPoints: ActionPoint[];
  mergeRequestDashboard: MergeRequestDashboard;
  qualityMetrics: QualityMetric[];
}

